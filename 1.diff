diff --git a/auth.go b/auth.go
index 2086bfe..051de8a 100644
--- a/auth.go
+++ b/auth.go
@@ -29,15 +29,16 @@ package main
 
 import (
 	"fmt"
-	"flag"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
+	"os"
 )
 
 var authcol = apilet.AuthMethods
 
 func doAuth(cmd int, name *string) {
-	a_actions := map[int]func(namep *string) {}
+	a_actions := map[int]func(namep *string){}
 	a_actions[CmdAdd] = authAdd
 	a_actions[CmdList] = authList
 	a_actions[CmdInfo] = authInfo
@@ -47,14 +48,16 @@ func doAuth(cmd int, name *string) {
 }
 
 func authAdd(name *string) {
-	key := flag.String("k", "", "jwt key (base64-encoded or auto)")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var key = goopt.String([]string{"-k", "--key"}, "", "jwt key (base64-encoded or auto)")
+	goopt.Parse(nil)
 
 	ai := api.AuthMethodImage{}
 	ai.Name = generate(*name, "am")
 
 	if *key != "" {
-		ai.JWT = &api.AuthJWTImage { Key: *key }
+		ai.JWT = &api.AuthJWTImage{Key: *key}
 	}
 
 	makeReq(authcol.Add(&ai), &ai)
@@ -63,7 +66,9 @@ func authAdd(name *string) {
 }
 
 func authDel(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	aid := resolve(authcol, *name)
 
@@ -72,6 +77,9 @@ func authDel(name *string) {
 
 func authList(_ *string) {
 	var as []*api.AuthMethodImage
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	makeReq(authcol.List(), &as)
 
@@ -81,7 +89,9 @@ func authList(_ *string) {
 }
 
 func authInfo(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	aid := resolve(authcol, *name)
 
diff --git a/cmd.go b/cmd.go
index b8448a9..2c915b8 100644
--- a/cmd.go
+++ b/cmd.go
@@ -29,7 +29,9 @@ package main
 
 import (
 	"fmt"
+	goopt "github.com/droundy/goopt"
 	"os"
+	"strings"
 )
 
 const (
@@ -63,8 +65,9 @@ func getCommand(c string) *Command {
 	}
 
 	return &Command{Do: func() {
-		fmt.Printf("Unknown command %s\n", c)
-		usage_commands()
+		goopt.Summary = fmt.Sprintf("Unknown command \"%s\"\n\n", c) + usage_commands_string()
+		goopt.ExtraUsage = ""
+		fmt.Println(goopt.Usage())
 	}}
 }
 
@@ -89,25 +92,26 @@ func doInfo()   { doTarget(CmdInfo) }
 func doTarget(c int) {
 	var name *string
 
-	if len(os.Args) <= 1 || os.Args[1] == "--help" {
-		fmt.Printf("Specify a target\n")
-		usage_targets()
+	if len(os.Args) <= 2 || os.Args[2] == "--help" || os.Args[2] == "-h" {
+		goopt.Summary = fmt.Sprintf("Specify a target\n\n") + usage_targets_string()
+		goopt.ExtraUsage = ""
+		fmt.Println(goopt.Usage())
 		return
 	}
 
-	t := os.Args[1]
-	os.Args = os.Args[1:]
+	t := os.Args[2]
 
 	if c != CmdList {
-		if len(os.Args) <= 1 {
-			fmt.Print("Specify an object name or %id for operations with existing objects\n")
+		if len(os.Args) <= 3 || strings.HasPrefix(os.Args[3], "-") {
+			goopt.Summary = fmt.Sprint("Specify an object name or %id \n")
+			goopt.ExtraUsage = ""
+			fmt.Println(goopt.Usage())
 			return
 		}
-		name = &os.Args[1]
-		os.Args = os.Args[1:]
+		name = &os.Args[3]
 	} else {
-		if len(os.Args) > 1 {
-			name = &os.Args[1]
+		if len(os.Args) > 3 {
+			name = &os.Args[3]
 		}
 	}
 
diff --git a/code.go b/code.go
index ba66715..7e5acd0 100644
--- a/code.go
+++ b/code.go
@@ -28,8 +28,8 @@
 package main
 
 import (
-	"flag"
 	"fmt"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
 	"io/ioutil"
@@ -87,8 +87,15 @@ func (ce elementCode) long() []*field {
 }
 
 func codeAdd(fcname *string) {
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
 	var fn, cname, lang, src string
 	var w int
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	var vlang = goopt.String([]string{"-l", "--language"}, "", "code language")
+	var vsrc = goopt.String([]string{"-s", "--source"}, "", "sources (file name or url or repo:<repo name>:path)")
+	var vw = goopt.Int([]string{"-w", "--weight"}, 0, "code weight")
+	goopt.Parse(nil)
 
 	if strings.Contains(*fcname, "/") {
 		x := strings.SplitN(*fcname, "/", 2)
@@ -99,28 +106,11 @@ func codeAdd(fcname *string) {
 		cname = x[1]
 	} else {
 		cname = *fcname
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
-	const (
-		langdefault_value = ""
-		langusage         = "language"
-		srcdefault_value  = ""
-		srcusage          = "sources (file name or url or repo:<repo name>:path)"
-		wdefault_value    = 0
-		wusage            = "code weight"
-	)
-	flag.StringVar(&lang, "language", langdefault_value, langusage)
-	flag.StringVar(&lang, "l", langdefault_value, langusage+" (shorthand)")
-	flag.StringVar(&src, "source", srcdefault_value, srcusage)
-	flag.StringVar(&src, "s", srcdefault_value, srcusage+" (shorthand)")
-	flag.IntVar(&w, "weight", wdefault_value, wusage)
-	flag.IntVar(&w, "w", wdefault_value, wusage+" (shorthand)")
-	flag.Parse()
+	lang = *vlang
+	src = *vsrc
+	w = *vw
 
 	fid := resolve(fcol, fn)
 
@@ -139,19 +129,16 @@ func codeAdd(fcname *string) {
 
 func codeList(fcname *string) {
 	var fn string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	goopt.Parse(nil)
 
 	if fcname != nil && strings.HasPrefix(*fcname, "-") == false {
 		fn = *fcname
-		os.Args = os.Args[1:]
 	} else {
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
-	flag.Parse()
 
 	fid := resolve(fcol, fn)
 
@@ -166,6 +153,10 @@ func codeList(fcname *string) {
 
 func codeDel(ver *string) {
 	var fn, cname string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	goopt.Parse(nil)
 
 	if strings.Contains(*ver, "/") {
 		x := strings.SplitN(*ver, "/", 2)
@@ -176,14 +167,8 @@ func codeDel(ver *string) {
 		cname = x[1]
 	} else {
 		cname = *ver
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
-	flag.Parse()
 
 	fnid := resolve(fcol, fn)
 	xcol := ccol.Sub(string(fnid))
@@ -195,6 +180,12 @@ func codeDel(ver *string) {
 func codeUpdate(ver *string) {
 	var fn, cname, src string
 	var w int
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	var vsrc = goopt.String([]string{"-s", "--source"}, "", "sources (file name or url or repo:<repo name>:path)")
+	var vw = goopt.Int([]string{"-w", "--weight"}, 0, "code weight")
+	goopt.Parse(nil)
 
 	if strings.Contains(*ver, "/") {
 		x := strings.SplitN(*ver, "/", 2)
@@ -205,25 +196,11 @@ func codeUpdate(ver *string) {
 		cname = x[1]
 	} else {
 		cname = *ver
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
 
-	const (
-		srcdefault_value = ""
-		srcusage         = "sources (file name or url or repo:<repo name>:path)"
-		wdefault_value   = 0
-		wusage           = "code weight"
-	)
-	flag.StringVar(&src, "source", srcdefault_value, srcusage)
-	flag.StringVar(&src, "s", srcdefault_value, srcusage+" (shorthand)")
-	flag.IntVar(&w, "weight", wdefault_value, wusage)
-	flag.IntVar(&w, "w", wdefault_value, wusage+" (shorthand)")
-	flag.Parse()
+	src = *vsrc
+	w = *vw
 
 	var ci api.CodeImage
 
@@ -240,6 +217,11 @@ func codeUpdate(ver *string) {
 
 func codeInfo(ver *string) {
 	var fn, cname string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	var voc = goopt.Flag([]string{"-C", "--code"}, []string{}, "Show code only", "")
+	goopt.Parse(nil)
 
 	if strings.Contains(*ver, "/") {
 		x := strings.SplitN(*ver, "/", 2)
@@ -250,22 +232,11 @@ func codeInfo(ver *string) {
 		cname = x[1]
 	} else {
 		cname = *ver
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
 
 	var only_code bool
-	const (
-		only_default_value = false
-		only_usage         = "show code only"
-	)
-	flag.BoolVar(&only_code, "code", only_default_value, only_usage)
-	flag.BoolVar(&only_code, "C", only_default_value, only_usage+" (shorthand)")
-	flag.Parse()
+	only_code = *voc
 
 	fnid := resolve(fcol, fn)
 	xcol := ccol.Sub(string(fnid))
diff --git a/func.go b/func.go
index 8c140d5..5916b66 100644
--- a/func.go
+++ b/func.go
@@ -29,8 +29,8 @@ package main
 
 import (
 	"encoding/json"
-	"flag"
 	"fmt"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
 	rq "github.com/unectio/util/request"
@@ -84,20 +84,16 @@ func (fe elementFn) long() []*field {
 }
 
 func functionAdd(name *string) {
-	var env string
-	const (
-		default_value = ""
-		usage         = "environment (key=val;...)"
-	)
-	flag.StringVar(&env, "environment", default_value, usage)
-	flag.StringVar(&env, "e", default_value, usage+" (shorthand)")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var env = goopt.String([]string{"-e", "--environment"}, "", "environment (key=val;...)")
+	goopt.Parse(nil)
 
 	fa := api.FunctionImage{}
 	fa.Name = generate(*name, "fn")
 
-	if env != "" {
-		fa.Env = parseEnv(env)
+	if *env != "" {
+		fa.Env = parseEnv(*env)
 	}
 
 	makeReq(fcol.Add(&fa), &fa)
@@ -112,7 +108,10 @@ func parseEnv(envs string) []string {
 func functionList(_ *string) {
 	var fns []*api.FunctionImage
 
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
+
 	makeReq(fcol.List(), &fns)
 
 	for _, fn := range fns {
@@ -121,20 +120,18 @@ func functionList(_ *string) {
 }
 
 func functionInfo(name *string) {
-	var inf string
-	const (
-		default_value = ""
-		usage         = "what to show (logs, stats)"
-	)
-	flag.StringVar(&inf, "information", default_value, usage)
-	flag.StringVar(&inf, "i", default_value, usage+" (shorthand)")
-	flag.Parse()
-
-	switch inf {
+
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var inf = goopt.String([]string{"-i", "--information"}, "", "what to show (logs, stats) ")
+	var lfor = goopt.String([]string{"--duration"}, "", "for what period logs to show (duration since now)")
+	goopt.Parse(nil)
+
+	switch *inf {
 	case "stats":
 		functionStats(name)
 	case "logs":
-		functionLogs(name)
+		functionLogs(name, lfor)
 	default:
 		functionCommonInfo(name)
 	}
@@ -151,7 +148,9 @@ func functionCommonInfo(name *string) {
 
 func functionDelete(name *string) {
 
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 	fnid := resolve(fcol, *name)
 
 	var cis []*api.CodeImage
@@ -167,37 +166,29 @@ func functionDelete(name *string) {
 
 func functionRun() {
 
-	if len(os.Args) <= 1 {
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	if len(os.Args) <= 2 {
 		fatal("Specify function/code to run")
 	}
 
 	var name, code, req string
+	var vname = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	var vreq = goopt.String([]string{"-r", "--request"}, "", "request (JSON string)")
+	goopt.Parse(nil)
 
-	if strings.Contains(os.Args[1], "/") {
-		x := strings.SplitN(os.Args[1], "/", 2)
+	if strings.Contains(os.Args[2], "/") {
+		x := strings.SplitN(os.Args[2], "/", 2)
 		if len(x) != 2 {
 			fatal("Specify function/code to run separated by \"/\" ")
 		}
 		name = x[0]
 		code = x[1]
 	} else {
-		code = os.Args[1]
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&name, "function", fndefault_value, fnusage)
-		flag.StringVar(&name, "f", fndefault_value, fnusage+" (shorthand)")
+		code = os.Args[2]
+		name = *vname
 	}
-	os.Args = os.Args[1:]
-
-	const (
-		rdefault_value = ""
-		rusage         = "request (JSON string)"
-	)
-	flag.StringVar(&req, "rq", rdefault_value, rusage)
-	flag.StringVar(&req, "request", rdefault_value, rusage+" (shorthand)")
-	flag.Parse()
+	req = *vreq
 
 	var rreq api.FuncRun
 	var res api.RunResponse
@@ -226,20 +217,16 @@ func functionRun() {
 }
 
 func functionUpdate(name *string) {
-	var env string
-	const (
-		default_value = ""
-		usage         = "environment (key=val;...)"
-	)
-	flag.StringVar(&env, "environment", default_value, usage)
-	flag.StringVar(&env, "e", default_value, usage+" (shorthand)")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var env = goopt.String([]string{"-e", "--environment"}, "", "environment (key=val;...)")
+	goopt.Parse(nil)
 
 	fnid := resolve(fcol, *name)
 
 	switch {
-	case env != "":
-		functionUpdateEnv(fnid, env)
+	case *env != "":
+		functionUpdateEnv(fnid, *env)
 	}
 }
 
diff --git a/logs.go b/logs.go
index e6f569c..ad31e53 100644
--- a/logs.go
+++ b/logs.go
@@ -29,16 +29,13 @@ package main
 
 import (
 	"fmt"
-	"flag"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
 )
 
 var logprop = apilet.FnLogs
 
-func functionLogs(name *string) {
-	lfor := flag.String("f", "", "for what period (duration since now)")
-	flag.Parse()
+func functionLogs(name *string, lfor *string) {
 
 	fid := resolve(fcol, *name)
 
diff --git a/main.go b/main.go
index 981540c..11036ce 100644
--- a/main.go
+++ b/main.go
@@ -28,9 +28,9 @@
 package main
 
 import (
-	"os"
 	"fmt"
-	"flag"
+	goopt "github.com/droundy/goopt"
+	"os"
 )
 
 const (
@@ -38,7 +38,7 @@ const (
 )
 
 func fatal(msg string, args ...interface{}) {
-	fmt.Fprintf(os.Stderr, msg + "\n", args...)
+	fmt.Fprintf(os.Stderr, msg+"\n", args...)
 	os.Exit(1)
 }
 
@@ -54,6 +54,15 @@ func usage_summary() {
 	fmt.Printf("\nDefault configuration file is %s\n\n", defaultConfig)
 }
 
+func usage_commands_string() string {
+	usage := fmt.Sprintf("Commands (<tgt> means command requires a target):\n")
+	cmds := listCommands()
+	for _, cmd := range cmds {
+		usage += fmt.Sprintf("\t%s\n", cmd)
+	}
+	return usage
+}
+
 func usage_commands() {
 	fmt.Printf("Available commands (<tgt> means command requires a target):\n")
 	cmds := listCommands()
@@ -70,21 +79,56 @@ func usage_targets() {
 	}
 }
 
-var debug *bool
-var dryrun *bool
+func usage_targets_string() string {
+	usage := fmt.Sprintf("Recognized targets:\n")
+	tgts := listTargets()
+	for _, tgt := range tgts {
+		usage += fmt.Sprintf("\t%s\n", tgt)
+	}
+	return usage
+}
+
+func usage_footer_string() string {
+	usage := fmt.Sprintf("\nTry '%s <command> --help' for command help\n", os.Args[0])
+	usage += fmt.Sprintf("    '%s <command> <target> --help' for target help\n", os.Args[0])
+	usage += fmt.Sprintf("    '%s <command> <target> <object> --help' for help with object arguments\n", os.Args[0])
+	usage += fmt.Sprintf("Default configuration file is %s", defaultConfig)
+	return usage
+}
+
+func usage_short_string() string {
+	return fmt.Sprintf("Usage: %s <command> [<target>] [<object>] [<options>]\n", os.Args[0])
+}
+
+func usage_string() string {
+	usage := ""
+	if goopt.Summary != "" {
+		usage += fmt.Sprintf("%s", goopt.Summary)
+	}
+	usage += fmt.Sprintf("\n%s", goopt.Help())
+	if goopt.ExtraUsage != "" {
+		usage += fmt.Sprintf("%s\n", goopt.ExtraUsage)
+	}
+	return usage
+}
+
+var debug = goopt.Flag([]string{"-d", "--debug"}, []string{}, "Pring debugging info", "")
+var dryrun = goopt.Flag([]string{"--dry-run"}, []string{}, "Do not do requests for real", "")
 
 func main() {
-	if len(os.Args) <= 1 || os.Args[1] == "--help" {
-		usage_summary()
+	goopt.Usage = usage_string
+	goopt.Summary = usage_short_string() + usage_commands_string() + "\n" + usage_targets_string()
+	goopt.ExtraUsage = usage_footer_string()
+	goopt.Version = "1.4"
+
+	if len(os.Args) <= 1 || os.Args[1] == "--help" || os.Args[1] == "-h" {
+		fmt.Println(goopt.Usage())
 		os.Exit(1)
 	}
 
-	debug = flag.Bool("debug", false, "Print debugging info")
-	dryrun = flag.Bool("dry-run", false, "Do not do requests for real")
-
 	/* Usage is always $ lets <command> [<object>] [<options>] */
 	c := os.Args[1]
-	os.Args = os.Args[1:]
+	//	os.Args = os.Args[1:]
 
 	cmd := getCommand(c)
 	cmd.Do()
diff --git a/repo.go b/repo.go
index 7bb5d06..4c53965 100644
--- a/repo.go
+++ b/repo.go
@@ -29,15 +29,16 @@ package main
 
 import (
 	"fmt"
-	"flag"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
+	"os"
 )
 
 var repcol = apilet.Repos
 
 func doRepo(cmd int, name *string) {
-	rep_actions := map[int]func(*string) {}
+	rep_actions := map[int]func(*string){}
 
 	rep_actions[CmdAdd] = repoAdd
 	rep_actions[CmdList] = repoList
@@ -48,16 +49,12 @@ func doRepo(cmd int, name *string) {
 }
 
 func repoAdd(name *string) {
-	var url string
-	const (
-		defaultUrl = ""
-		usageUrl = "repo URL (git)"
-	)
-	flag.StringVar(&url, "url", defaultUrl, usageUrl)
-	flag.StringVar(&url, "u", defaultUrl, usageUrl+" (shorthand)")
-	flag.Parse()
-
-	if url == "" {
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	var url = goopt.String([]string{"-u", "--url"}, "", "repo URL (git)")
+	goopt.Parse(nil)
+
+	if *url == "" {
 		fatal("No URL specified, mind using -u or --url option")
 	}
 
@@ -65,27 +62,30 @@ func repoAdd(name *string) {
 
 	rp.Name = generate(*name, "repo")
 	rp.Type = "git"
-	rp.URL = url
-
+	rp.URL = *url
 	makeReq(repcol.Add(&rp), &rp)
 
 	fmt.Printf("Added repo (id %s)\n", rp.Id)
 }
 
 func repoDel(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	rpid := resolve(repcol, *name)
-	
+
 	makeReq(repcol.Delete(string(rpid)), nil)
-	
+
 	fmt.Printf("Deleted repo (id %s)\n", rpid)
 }
 
 func repoList(_ *string) {
 	var rps []*api.RepoImage
 
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	makeReq(repcol.List(), &rps)
 
@@ -100,7 +100,9 @@ func repoList(_ *string) {
 }
 
 func repoInfo(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	rpid := resolve(repcol, *name)
 
diff --git a/router.go b/router.go
index 43487e5..5d4951a 100644
--- a/router.go
+++ b/router.go
@@ -28,14 +28,14 @@
 package main
 
 import (
-	"os"
-	"fmt"
-	"flag"
 	"bufio"
 	"errors"
-	"strings"
+	"fmt"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
+	"os"
+	"strings"
 )
 
 var rtcol = apilet.Routers
@@ -44,7 +44,7 @@ func init() {
 }
 
 func doRouter(cmd int, name *string) {
-	rt_actions := map[int]func(*string) {}
+	rt_actions := map[int]func(*string){}
 
 	rt_actions[CmdAdd] = routerAdd
 	rt_actions[CmdList] = routerList
@@ -72,9 +72,9 @@ func parseRule(rule string) (*api.RouteRuleImage, error) {
 
 	fnid := resolve(fcol, rule[sep2+1:])
 
-	ret := &api.RouteRuleImage {}
+	ret := &api.RouteRuleImage{}
 	ret.Methods = rule[:sep1]
-	ret.Path = rule[sep1+1:sep2]
+	ret.Path = rule[sep1+1 : sep2]
 	ret.FnId = fnid
 
 	return ret, nil
@@ -149,9 +149,11 @@ func parseTable(table, file string) ([]*api.RouteRuleImage, error) {
 var muxprop = apilet.RtMux
 
 func routerUpdate(name *string) {
-	table := flag.String("t", "", "table (m,.../path=fn:...)")
-	table_from := flag.String("tf", "", "file to read table from (in info -M format)")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var table = goopt.String([]string{"-t", "--table"}, "", "table (m,.../path=fn:...)")
+	var table_from = goopt.String([]string{"--tablefrom"}, "", "file to read table from (in info -M format)")
+	goopt.Parse(nil)
 
 	rtid := resolve(rtcol, *name)
 
@@ -166,10 +168,12 @@ func routerUpdate(name *string) {
 }
 
 func routerAdd(name *string) {
-	table := flag.String("t", "", "table (m,.../path=fn:...)")
-	table_from := flag.String("tf", "", "file to read table from (in info -M format)")
-	url := flag.String("u", "", "custom URL to work on")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var table = goopt.String([]string{"-t", "--table"}, "", "table (m,.../path=fn:...)")
+	var table_from = goopt.String([]string{"--tablefrom"}, "", "file to read table from (in info -M format)")
+	var url = goopt.String([]string{"-u", "--url"}, "", "custom URL to work on")
+	goopt.Parse(nil)
 
 	mux, err := parseTable(*table, *table_from)
 	if err != nil {
@@ -193,7 +197,9 @@ func routerAdd(name *string) {
 }
 
 func routerDelete(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	rtid := resolve(rtcol, *name)
 
@@ -203,7 +209,9 @@ func routerDelete(name *string) {
 func routerList(_ *string) {
 	var rts []*api.RouterImage
 
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	makeReq(rtcol.List(), &rts)
 
@@ -213,8 +221,10 @@ func routerList(_ *string) {
 }
 
 func routerInfo(name *string) {
-	mux_only := flag.Bool("M", false, "Show only the mux")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var mux_only = goopt.Flag([]string{"-M", "--muxonly"}, []string{}, "Show only the mux", "")
+	goopt.Parse(nil)
 
 	rtid := resolve(rtcol, *name)
 
diff --git a/secret.go b/secret.go
index 1df499a..5d9cd80 100644
--- a/secret.go
+++ b/secret.go
@@ -29,16 +29,17 @@ package main
 
 import (
 	"fmt"
-	"flag"
-	"strings"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
+	"os"
+	"strings"
 )
 
 var seccol = apilet.Secrets
 
 func doSecret(cmd int, name *string) {
-	sec_actions := map[int]func(*string) {}
+	sec_actions := map[int]func(*string){}
 
 	sec_actions[CmdAdd] = secretAdd
 	sec_actions[CmdList] = secretList
@@ -63,12 +64,14 @@ func parseKV(kv string) map[string]string {
 }
 
 func secretAdd(name *string) {
-	kv := flag.String("kv", "", "table (k=v;...)")
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var kv = goopt.String([]string{"-k", "--key"}, "", "table (k=v;...)")
+	goopt.Parse(nil)
 
 	pl := parseKV(*kv)
 
-	sec := api.SecretImage {}
+	sec := api.SecretImage{}
 
 	sec.Name = generate(*name, "sec")
 	sec.Payload = pl
@@ -79,7 +82,9 @@ func secretAdd(name *string) {
 }
 
 func secretDelete(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	secid := resolve(seccol, *name)
 
@@ -89,7 +94,9 @@ func secretDelete(name *string) {
 func secretList(_ *string) {
 	var secs []*api.SecretImage
 
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	makeReq(seccol.List(), &secs)
 
@@ -99,7 +106,9 @@ func secretList(_ *string) {
 }
 
 func secretInfo(name *string) {
-	flag.Parse()
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	goopt.Parse(nil)
 
 	secid := resolve(seccol, *name)
 
diff --git a/stats.go b/stats.go
index 7d31864..ec28f89 100644
--- a/stats.go
+++ b/stats.go
@@ -29,7 +29,6 @@ package main
 
 import (
 	"fmt"
-	"flag"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
 )
@@ -37,7 +36,6 @@ import (
 var stprop = apilet.FnStats
 
 func functionStats(name *string) {
-	flag.Parse()
 
 	fid := resolve(fcol, *name)
 
diff --git a/tgt.go b/tgt.go
index 919c4f3..faa5feb 100644
--- a/tgt.go
+++ b/tgt.go
@@ -29,38 +29,40 @@ package main
 
 import (
 	"fmt"
+	goopt "github.com/droundy/goopt"
 )
 
 type Target struct {
-	Do	func(cmd int, namep *string)
+	Do func(cmd int, namep *string)
 }
 
 func getTarget(t string) *Target {
 	switch t {
 	case "fn", "func", "function":
-		return &Target { Do: doFunction }
+		return &Target{Do: doFunction}
 	case "code":
-		return &Target { Do: doCode }
+		return &Target{Do: doCode}
 	case "rt", "router":
-		return &Target { Do: doRouter }
+		return &Target{Do: doRouter}
 	case "repo", "repository":
-		return &Target { Do: doRepo }
+		return &Target{Do: doRepo}
 	case "sec", "secret":
-		return &Target { Do: doSecret }
+		return &Target{Do: doSecret}
 	case "tg", "trig", "trigger":
-		return &Target { Do: doTrigger }
+		return &Target{Do: doTrigger}
 	case "am", "auth_method":
-		return &Target { Do: doAuth }
+		return &Target{Do: doAuth}
 	}
 
-	return &Target { Do: func(_ int, _ *string) {
-		fmt.Printf("Unknown target - \"%s\"\n", t)
-		usage_targets()
-	} }
+	return &Target{Do: func(_ int, _ *string) {
+		goopt.Summary = fmt.Sprintf("Unknown target \"%s\"\n\n", t) + usage_targets_string()
+		goopt.ExtraUsage = ""
+		fmt.Println(goopt.Usage())
+	}}
 }
 
 func listTargets() []string {
-	return []string {
+	return []string{
 		"fn | func | function",
 		"code",
 		"rt | router",
@@ -74,7 +76,7 @@ func listTargets() []string {
 func doTargetCmd(cmd int, namep *string, actions map[int]func(namep *string)) {
 	fn, ok := actions[cmd]
 	if !ok {
-		fn = func(_ *string){ usage_targets() }
+		fn = func(_ *string) { usage_targets() }
 	}
 	fn(namep)
 }
diff --git a/trigger.go b/trigger.go
index 3ab36ad..1162492 100644
--- a/trigger.go
+++ b/trigger.go
@@ -28,8 +28,8 @@
 package main
 
 import (
-	"flag"
 	"fmt"
+	goopt "github.com/droundy/goopt"
 	"github.com/unectio/api"
 	"github.com/unectio/api/apilet"
 	"os"
@@ -98,6 +98,15 @@ func (te elementTg) long() []*field {
 
 func triggerAdd(name *string) {
 	var fn, tname string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	var vsrc = goopt.String([]string{"--tsource"}, "", "trigger source")
+	var vurl = goopt.String([]string{"-u", "--url"}, "", "trigger URL")
+	var va = goopt.String([]string{"-a", "--auth"}, "", "URL trigger auth name/id")
+	var vct = goopt.String([]string{"--crontab"}, "", "Cron trigger tab")
+	var vca = goopt.String([]string{"--cronargs"}, "", "Cron trigger args in foo=bar:... format")
+	goopt.Parse(nil)
 
 	if strings.Contains(*name, "/") {
 		x := strings.SplitN(*name, "/", 2)
@@ -108,43 +117,31 @@ func triggerAdd(name *string) {
 		tname = x[1]
 	} else {
 		tname = *name
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
 
-	src := flag.String("s", "", "trigger source")
-	auth := flag.String("a", "", "URL trigger auth name/id")
-	url := flag.String("u", "", "URL trigger URL")
-	tab := flag.String("t", "", "Cron trigger tab")
-	cargs := flag.String("ca", "", "Cron trigger args in foo=bar:... format")
-	flag.Parse()
-
 	fid := resolve(fcol, fn)
 
 	tra := api.FuncTriggerImage{}
 	tra.Name = generate(tname, "tg")
 
-	switch *src {
+	switch *vsrc {
 	case "url":
 		tra.URL = &api.URLTrigImage{URL: api.AutoValue}
-		if *auth != "" {
-			tra.URL.AuthId = resolve(authcol, *auth)
+		if *va != "" {
+			tra.URL.AuthId = resolve(authcol, *va)
 		}
-		if *url != "" {
-			tra.URL.URL = api.URLProjectPfx + *url
+		if *vurl != "" {
+			tra.URL.URL = api.URLProjectPfx + *vurl
 		}
 	case "cron":
 		tra.Cron = &api.CronTrigImage{}
-		if *tab != "" {
-			tra.Cron.Tab = *tab
+		if *vct != "" {
+			tra.Cron.Tab = *vct
 		}
-		if *cargs != "" {
+		if *vca != "" {
 			tra.Cron.Args = make(map[string]string)
-			for _, a := range strings.Split(*cargs, ":") {
+			for _, a := range strings.Split(*vca, ":") {
 				x := strings.SplitN(a, "=", 2)
 				if len(x) != 2 {
 					fatal("Bad cron arg %s", a)
@@ -161,20 +158,17 @@ func triggerAdd(name *string) {
 
 func triggerList(fcname *string) {
 	var fn string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	goopt.Parse(nil)
 
 	if fcname != nil && strings.HasPrefix(*fcname, "-") == false {
 		fn = *fcname
-		os.Args = os.Args[1:]
 	} else {
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
 
-	flag.Parse()
 	fid := resolve(fcol, fn)
 
 	var tgs []*api.FuncTriggerImage
@@ -188,6 +182,10 @@ func triggerList(fcname *string) {
 
 func triggerDel(name *string) {
 	var fn, tname string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	goopt.Parse(nil)
 
 	if strings.Contains(*name, "/") {
 		x := strings.SplitN(*name, "/", 2)
@@ -198,14 +196,8 @@ func triggerDel(name *string) {
 		tname = x[1]
 	} else {
 		tname = *name
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
-	flag.Parse()
 
 	fnid := resolve(fcol, fn)
 	tcol := tgcol.Sub(string(fnid))
@@ -216,6 +208,10 @@ func triggerDel(name *string) {
 
 func triggerInfo(name *string) {
 	var fn, tname string
+	goopt.Summary = fmt.Sprintf("Usage: %s %s %s %s:\n", os.Args[0], os.Args[1], os.Args[2], os.Args[3])
+	goopt.ExtraUsage = ""
+	var vfn = goopt.String([]string{"-f", "--function"}, "", "function name/id")
+	goopt.Parse(nil)
 
 	if strings.Contains(*name, "/") {
 		x := strings.SplitN(*name, "/", 2)
@@ -226,14 +222,8 @@ func triggerInfo(name *string) {
 		tname = x[1]
 	} else {
 		tname = *name
-		const (
-			fndefault_value = ""
-			fnusage         = "function name/id"
-		)
-		flag.StringVar(&fn, "function", fndefault_value, fnusage)
-		flag.StringVar(&fn, "f", fndefault_value, fnusage)
+		fn = *vfn
 	}
-	flag.Parse()
 
 	fnid := resolve(fcol, fn)
 	tcol := tgcol.Sub(string(fnid))
