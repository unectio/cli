#/usr/bin/env bash
#-*- mode: shell-script;-*-

# example command line completion.
# Copyright 2002,2010 "David Roundy" <roundyd@physics.oregonstate.edu>
#
#have lets &&
_lets()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}

    COMPREPLY=()

    local IFS=$'\n' # So that the following "command-output to array" operation splits only at newlines, not at each space, tab or newline.
    COMPREPLY=( $( "${COMP_WORDS[@]}" --list-options | grep "^${cur//./\\.}") )

	# Then, we adapt the resulting strings to be reusable by bash. If we don't
	# do this, in the case where we have two expansions named
	# `~/space in there-0.1` and `~/space in there-0.2`, the first completion will
	# give us:
	# bash> goopt-example --spacy-alternatives ~/space in there-0.
	# ~/space in there-0.1 ~/space in there-0.2
	# and we have introduced two spaces in the command line (if we try to
	# recomplete that, it won't find anything, as it doesn't know anything
	# starting with "there-0.").
	# printf %q will gracefully add the necessary backslashes.
	#
	# Bash also interprets colon as a separator. If we didn't handle it
	# specially, completing http://example.org/path from http://e would 
	# give us:
	# bash> goopt-example --url-alternatives http:http://example.org/repo
	# An option would be to require the user to escape : as \: and we
	# would do the same here. Instead, we return only the part after
	# the last colon that is already there, and thus fool bash. The
	# downside is that bash only shows this part to the user.
    local i=${#COMPREPLY[*]}
    local colonprefixes=${cur%"${cur##*:}"}
    while [ $((--i)) -ge 0 ]; do
      COMPREPLY[$i]=`printf %q "${COMPREPLY[$i]}"`

      COMPREPLY[$i]=${COMPREPLY[$i]#"$colonprefixes"} 
    done
    return 0

}
complete -F _lets -o default lets
